#+TITLE:     Introducción a R
#+AUTHOR:    Oscar Perpiñán Lamigueiro
#+EMAIL:     oscar.perpinan@gmail.com
#+DATE:      24 de Enero de 2013
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  es
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+BEAMER_FRAME_LEVEL: 3
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Contenidos}\tableofcontents[currentsection]\end{frame}}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}, commentstyle=\color{gray!90}, basicstyle=\ttfamily\small, columns=fullflexible, breaklines=true,linewidth=\textwidth, backgroundcolor=\color{gray!23}, basewidth={0.5em,0.4em}, literate={á}{{\'a}}1 {ñ}{{\~n}}1 {é}{{\'e}}1 {ó}{{\'o}}1 {º}{{\textordmasculine}}1}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \setbeamercovered{transparent}
#+LATEX_HEADER: \usefonttheme{serif} 
#+LATEX_HEADER: \usetheme{Goettingen}
#+PROPERTY:  tangle yes
#+PROPERTY:  comments org


* Vectores

** Vectores numéricos

*** Primeros pasos
#+begin_src R 
x <- 1
x
length(x)
class(x)

x <- c(1, 2, 3)
x
length(x)
class(x)
#+end_src

*** Primeras funciones
#+begin_src R 
class(c)
class(length)
length
#+end_src

*** Operaciones sencillas con vectores
#+begin_src R 
  x + 1
  y <- 1:10
  x + y
  x * y
  x^2
#+end_src

*** Generar vectores con =seq=
#+begin_src R 
x1 <- seq(1, 100, by=2)
x1
help(seq)

seq(1, 100, 10)
seq(1, 100, length=10)
seq(1, 1, 10)

x <- seq(1, 100, length=10)
x
length(x)

x <- seq(1, 100, length=10)
y <- seq(2, 100, length=50)
#+end_src

*** Unir vectores con =c=
#+begin_src R 
z <- c(x, y)
z
z + c(1, 2)
z + c(1, 2, 3, 4, 5, 6, 7)
z <- c(z, z, z, z)
z
#+end_src

*** Generar vectores con =rep=
#+begin_src R 
rep(1:10, 4)

length(z)

rep(c(1, 2, 3), 10)
rep(c(1, 2, 3), each=10)
help(rep)
#+end_src


*** Indexado numérico de vectores

#+begin_src R 
  x <- seq(1, 100, 2)
  1:5
  x[c(1, 2, 3, 4, 5)]
  x[1:5]
  x[10:5]
#+end_src

*** Indexado de vectores con condiciones lógicas
#+begin_src R 
  condicion <- (x>30)
  condicion
  class(condicion)
#+end_src

*** Indexado de vectores con condiciones lógicas

#+begin_src R 
  x==37
  x[x==37]
  x[x!=9]
  x[x>20]
#+end_src

**** Y aquí, ¿qué ocurre?					    :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:

#+begin_src R 
x[x=10]
#+end_src

*** Indexado de vectores con =%in%=
#+begin_src R 
y <- seq(101, 200, 2)
y %in% c(101, 127, 141)
y
y[y %in% c(101, 127, 141)]
#+end_src

*** Indexado de vectores con condiciones múltiples

#+begin_src R 
z <- c(x, y)
z
z>150
z[z>150]
z[z<30 | z>150]
z[z>=30 & z<=150]
z[c(1, 10, 40, 80)]
#+end_src

*** Indexado de vectores con condiciones múltiples
#+begin_src R 
cond  <-  (x>10) & (x<50)
cond
cond  <-  (x>=10) & (x<=50)
cond
x[cond]

#+end_src

*** Con las condiciones se pueden hacer operaciones
#+begin_src R 
sum(cond)
!cond
sum(!cond)
length(x[cond])
length(x[!cond])
as.numeric(cond)
#+end_src


** Operaciones con vectores numéricos
*** Aritmética sencilla
#+begin_src R 
x + y
x - y
x * y
x^2 + y^3
exp(x)
log(x)
#+end_src

*** Funciones predefinidas
#+begin_src R 
summary(x)
mean(x)
sd(x)
median(x)
max(x)
min(x)
range(x)
quantile(x)
#+end_src

*** Funciones y condiciones
#+begin_src R 
sum(x)
sum(x[cond])
sum(x[(x>=10) & (x<=50)])
x[1] + x[2] + x[3] + x[4] + x[5]
sum(x[1:5])
#+end_src


*** ¿Y qué hago cuando necesito ayuda?

#+begin_src R 
help(exp)
help(sum)
help(quantile)
#+end_src


** Valores ausentes
   
*** ¿Qué es =NA=?
#+begin_src R 
class(NA)
seq_along(x)
idx <- sample(seq_along(x), 10)
idx
x[idx]
x2 <- x
x2[idx] <- NA
x2
#+end_src

*** =NA= en las funciones

#+begin_src R 
summary(x2)
mean(x2)
sum(x2)
#+end_src

*** =NA= en las funciones

#+begin_src R 
mean(x2, na.rm=TRUE)
sum(x2, na.rm=TRUE)
sd(x2, na.rm=TRUE)
class(TRUE)
#+end_src


* Matrices
** Construcción de matrices
*** Construir una matriz
#+begin_src R 
z <- 1:12
M  <-  matrix(z, nrow=3)
M
z
help(matrix)
class(M)
dim(M)
summary(M)
#+end_src

*** Matrices a partir de vectores: =rbind= y =cbind=
#+begin_src R 
x <- 1:10
y <- 1:10
z <- 1:10
z <- y <- x <- 1:10

M <- cbind(x, y, z)
M
M <- rbind(x, y, z)
M

rbind(M, M)
cbind(M, M)
#+end_src

*** Transponer una matriz

#+begin_src R 
t(M)
class(t)
dim(t(M))
#+end_src


** Operaciones con matrices
*** Operaciones con matrices

#+begin_src R 
M * M
M ^ 2
M %*% M
M %*% t(M)
help('%*%')
#+end_src

*** Operaciones con matrices: funciones predefinidas

#+begin_src R 
sum(M)
rowSums(M)
colSums(M)
rowMeans(M)
colMeans(M)
#+end_src

*** La función =apply=
#+begin_src R 
help(apply)
apply(M, 1, sum)
apply(M, 2, sum)
apply(M, 1, mean)
apply(M, 2, mean)
apply(M, 1, sd, na.rm=TRUE)
apply(M, 2, sd)
#+end_src


** Indexado de matrices
*** Indexado de matrices
#+begin_src R 
M
M[]
M[1, ]
M[, 1]
sum(M[, 1])
M[1:2, ]
M[1:2, 2:3]
M[1, c(1, 4)]
M[-1,]
M[-c(1, 2),]
#+end_src
    

* Funciones

** Definición de funciones
*** Para definir una función usamos la función =function=
#+begin_src R 
  myFun <- function(x, y) x + y
  myFun(3, 4)
  class(myFun)
#+end_src

*** Definir una función a partir de funciones
#+begin_src R 
foo  <-  function(x, ...){
  mx <- mean(x, ...)
  medx <- median(x, ...)
  sdx <- sd(x, ...)
  c(mx, medx, sdx)
  }
#+end_src
O en forma resumida:
#+begin_src R 
foo <- function(x, ...){c(mean(x, ...), median(x, ...), sd(x, ...))}
#+end_src


** Uso de funciones
*** Y ahora usamos la función con vectores
#+begin_src R 
foo(1:10)

rnorm(100)
help(rnorm)
foo(rnorm(1e5))
#+end_src

*** Y también funciona con matrices
#+begin_src R 
rowMeans(M)
apply(M, 1, foo)
colMeans(M)
apply(M, 2, foo)
#+end_src

*** La función =outer=
#+begin_src R 
f <- function(x, y)x^2+y^2
f
f(1, 2)
x
y

z <- outer(x, y, f)
z
image(x, y, z)
#+end_src


* Listas y data.frame

** Listas
*** Para crear una lista usamos la función =list=
#+begin_src R 
  lista <- list(a=c(1,3,5),
                b=c('l', 'p', 'r', 's'),
                c=3)
  class(list)
  class(lista)
#+end_src

*** Podemos acceder a los elementos por su nombre
#+begin_src R 
lista
lista$a
lista$b
lista$c
#+end_src

*** o por su índice
#+begin_src R 
  lista[1]
  lista[[1]]
  
  class(lista[1])
  class(lista[[1]])
  
  lista[2]
  lista[[2]]
  
  class(lista[2])
  class(lista[[2]])
#+end_src

*** Cada elemento es de una clase diferente
#+begin_src R 
class(lista)
class(lista$a)
class(lista$b)
class(lista$c)
#+end_src
*** y de una longitud diferente
#+begin_src R 
length(lista)
length(lista$a)
length(lista$b)
length(lista$c)
#+end_src

*** Para matrices =apply=, para listas =lapply= y =sapply=
#+begin_src R 
lapply(lista, length)
sapply(lista, length)

lista <- list(x = 1:10,
              y = seq(0, 10, 2),
              z = rnorm(30))
lista
lapply(lista, sum)
lapply(lista, median)
lapply(lista, foo)
#+end_src


** Data.frame
*** Para crear un =data.frame=...
#+begin_src R 
df <- data.frame(x = 1:10,
                 y = rnorm(10),
                 z = 0)

length(df)
dim(df)
#+end_src
*** Podemos acceder a los elementos por su nombre
#+begin_src R 
df$x
df$y
df$z
#+end_src

*** o por su índice
#+begin_src R 
df
df[1,]
df[,1]
df[,2]
#+end_src

*** La función =expand.grid=

#+begin_src R 
x <- y <- seq(-4*pi, 4*pi, len=200)
df <- expand.grid(x = x, y = y)
head(df)
tail(df)
summary(df)
dim(df)
names(df)
#+end_src

*** Funciones sobre =data.frame=

#+begin_src R 
circles <- function(object){
  r <- with(object, sqrt(x^2 + y^2))
  res <- cos(r^2)*exp(-r/6)
  res}

df$result <- circles(df)
head(df)
#+end_src


* Gráficos
** Base
*** Base
#+begin_src R 
plot(df$x, df$y)
#+end_src
** Grid
*** Lattice: =xyplot=
#+begin_src R 
library(lattice)

xyplot(y ~ x, data=df)
xyplot(y ~ x, data=df, type='l')
xyplot(y ~ x, data=df, type='b')
xyplot(y ~ x, data=df, type=c('b', 'g'))
xyplot(y ~ x, data=df, type=c('b', 'r', 'g'))

help(xyplot)
#+end_src

*** Lattice: =levelplot=
#+begin_src R 
levelplot(result ~ x * y, data=df)
xyplot(result ~ x, data=df)
#+end_src
