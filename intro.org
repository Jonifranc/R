#+TITLE:     Introducción a R
#+AUTHOR:    Oscar Perpiñán Lamigueiro
#+EMAIL:     oscar.perpinan@gmail.com
#+DATE:      Febrero de 2013
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  es
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+BEAMER_FRAME_LEVEL: 3
#+LATEX_CLASS_OPTIONS: [xcolor={usenames,svgnames,dvipsnames}]
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}[plain]\tableofcontents[currentsection,hideallsubsections]\end{frame}}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}, commentstyle=\color{gray!90}, basicstyle=\ttfamily\small, columns=fullflexible, breaklines=true,linewidth=\textwidth, backgroundcolor=\color{gray!23}, basewidth={0.5em,0.4em}, literate={á}{{\'a}}1 {ñ}{{\~n}}1 {é}{{\'e}}1 {ó}{{\'o}}1 {º}{{\textordmasculine}}1}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \usefonttheme{serif}
#+LATEX_HEADER: \usecolortheme{rose}  
#+LATEX_HEADER: \usetheme{Goettingen}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=Blue, urlcolor=Blue}
#+PROPERTY:  tangle yes
#+PROPERTY:  comments org

* R es software libre
** ¿Qué es =R=?
*** ¿Qué es =R=?						    
**** ¿Qué es [[http://procomun.wordpress.com/2011/02/23/que-es-r/][R]]?			    :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
Es un lenguaje de programación principalmente orientado al
análisis estadístico y visualización de información cuantitativa y
cualitativa y publicado como software libre con licencia GNU-GPL.
#+BEGIN_CENTER
 [[http://www.R-project.org]] 
#+END_CENTER

*** Para instalar =R=

- Windows: http://cran.es.r-project.org/bin/windows/base/
- Mac: http://cran.es.r-project.org/bin/macosx/
- Linux: http://cran.es.r-project.org/bin/linux/

*** Interfaces para R

- En mi opinión, la mejor interfaz para R es [[http://ess.r-project.org/][ESS]] con [[http://www.gnu.org/software/emacs/][Emacs]]. 
- Para los que prefieren una interfaz gráfica es recomendable [[http://www.rstudio.com/ide/][RStudio]]:
  - Instalador: http://www.rstudio.com/ide/download/desktop
  - Introducción: http://www.rstudio.com/ide/docs/using/source

** R es un proyecto colaborativo
*** R es un proyecto colaborativo
- Una de las grandes riquezas de R es la cantidad de paquetes (más
  de 4000 actualmente) que amplían sus funcionalidades.  
- La lista completa está en http://cran.es.r-project.org/web/packages/.
- Las CRAN Task Views agrupan por temáticas:
  [[http://cran.r-project.org/web/views/]]

*** Más de 4000 paquetes disponibles
- Algunos vienen instalados y se cargan al empezar:
#+begin_src R 
  sessionInfo()
#+end_src
- Otros vienen instalados pero hay que cargarlos:
#+begin_src R 
  library(lattice)
  packageVersion('lattice')
  packageDescription('lattice')
#+end_src
- Otros hay que instalarlos y después cargarlos:
#+begin_src R 
  install.packages('zoo')
  library('zoo')
  packageDescription('zoo')
#+end_src

** R está muy bien documentado

*** Fuentes de información
- [[http://cran.r-project.org/doc/manuals/R-intro.html][Manual introductorio]]
- [[http://cran.r-project.org/manuals.html][Manuales oficiales]]
- [[http://cran.r-project.org/other-docs.html][Manuales externos]]
- [[http://www.r-project.org/mail.html][Listas de correo]] (sin olvidar respetar [[http://www.r-project.org/posting-guide.html][estos consejos]]).
- [[http://www.r-bloggers.com][R-bloggers]]


* Vectores y Matrices

** Vectores 
*** Primeros pasos
#+begin_src R 
x <- 1
x
length(x)
class(x)

x <- c(1, 2, 3)
x
length(x)
class(x)
#+end_src

*** Primeras funciones
#+begin_src R 
class(c)
class(length)
length
#+end_src

*** Operaciones sencillas con vectores
#+begin_src R 
  x + 1
  y <- 1:10
  x + y
  x * y
  x^2
  x^2 + y^3
  exp(x)
  log(x)
#+end_src

*** ¿Y qué hago cuando necesito ayuda?

#+begin_src R 
help(exp)
help(log)
#+end_src

*** Generar vectores con =seq=
#+begin_src R 
x1 <- seq(1, 100, by=2)
x1
help(seq)

seq(1, 100, 10)
seq(1, 100, length=10)
seq(1, 1, 10)

x <- seq(1, 100, length=10)
x
length(x)

x <- seq(1, 100, length=10)
y <- seq(2, 100, length=50)
#+end_src

*** Unir vectores con =c=
#+begin_src R 
z <- c(x, y)
z
z + c(1, 2)
z + c(1, 2, 3, 4, 5, 6, 7)
z <- c(z, z, z, z)
z
#+end_src

*** Generar vectores con =rep=
#+begin_src R 
rep(1:10, 4)

length(z)

rep(c(1, 2, 3), 10)
rep(c(1, 2, 3), each=10)
help(rep)
#+end_src


*** Indexado numérico de vectores

#+begin_src R 
  x <- seq(1, 100, 2)
  1:5
  x[c(1, 2, 3, 4, 5)]
  x[1:5]
  x[10:5]
#+end_src

*** Indexado de vectores con condiciones lógicas
#+begin_src R 
  condicion <- (x>30)
  condicion
  class(condicion)
#+end_src

*** Indexado de vectores con condiciones lógicas

#+begin_src R 
  x==37
  x[x==37]
  x[x!=9]
  x[x>20]
#+end_src

- Y aquí ¿qué ocurre?
#+begin_src R 
  x[x=10]
#+end_src
     
*** Indexado de vectores con =%in%=
#+begin_src R 
y <- seq(101, 200, 2)
y %in% c(101, 127, 141)
y
y[y %in% c(101, 127, 141)]
#+end_src

*** Indexado de vectores con condiciones múltiples

#+begin_src R 
z <- c(x, y)
z
z>150
z[z>150]
z[z<30 | z>150]
z[z>=30 & z<=150]
z[c(1, 10, 40, 80)]
#+end_src

*** Indexado de vectores con condiciones múltiples
#+begin_src R 
cond  <-  (x>10) & (x<50)
cond
cond  <-  (x>=10) & (x<=50)
cond
x[cond]

#+end_src

*** Con las condiciones se pueden hacer operaciones
#+begin_src R 
sum(cond)
!cond
sum(!cond)
length(x[cond])
length(x[!cond])
as.numeric(cond)
#+end_src
    

*** Funciones predefinidas
#+begin_src R 
summary(x)
mean(x)
sd(x)
median(x)
max(x)
min(x)
range(x)
quantile(x)
#+end_src



** Matrices
*** Construir una matriz
#+begin_src R 
  z <- 1:12
  M  <-  matrix(z, nrow=3)
  M
  z
  help(matrix)
  class(M)
  dim(M)
  summary(M)
#+end_src

*** Matrices a partir de vectores: =rbind= y =cbind=
#+begin_src R 
x <- 1:10
y <- 1:10
z <- 1:10
z <- y <- x <- 1:10

M <- cbind(x, y, z)
M
M <- rbind(x, y, z)
M

rbind(M, M)
cbind(M, M)
#+end_src

*** Transponer una matriz

#+begin_src R 
t(M)
class(t)
dim(t(M))
#+end_src

*** Operaciones con matrices

#+begin_src R 
M * M
M ^ 2
M %*% M
M %*% t(M)
help('%*%')
#+end_src

*** Operaciones con matrices: funciones predefinidas

#+begin_src R 
sum(M)
rowSums(M)
colSums(M)
rowMeans(M)
colMeans(M)
#+end_src

*** La función =apply=
#+begin_src R 
help(apply)
apply(M, 1, sum)
apply(M, 2, sum)
apply(M, 1, mean)
apply(M, 2, mean)
apply(M, 1, sd, na.rm=TRUE)
apply(M, 2, sd)
#+end_src

*** =sweep=
- Usamos el conjunto de datos =state.x77=
#+begin_src R 
  head(state.x77)  
#+end_src
- Calculamos el máximo por columna
#+begin_src R 
maxes <- apply(state.x77, 2, max)
#+end_src
- Dividimos cada columna por su máximo
#+begin_src R 
  stateNorm <- sweep(state.x77, 2, maxes, FUN="/")
  head(stateNorm)
#+end_src

*** Indexado de matrices
#+begin_src R 
M
M[]
M[1, ]
M[, 1]
sum(M[, 1])
M[1:2, ]
M[1:2, 2:3]
M[1, c(1, 4)]
M[-1,]
M[-c(1, 2),]
#+end_src
    

** Valores ausentes
   
*** ¿Qué es =NA=?
#+begin_src R 
  class(NA)
  x <- rnorm(100)
  idx <- sample(length(x), 10)
  idx
  x[idx]
  x2 <- x
  x2[idx] <- NA
  x2
#+end_src

*** =NA= en las funciones

#+begin_src R 
  summary(x)
  mean(x)
  sum(x)
  
  summary(x2)
  mean(x2)
  sum(x2)
#+end_src

*** =NA= en las funciones

#+begin_src R 
mean(x2, na.rm=TRUE)
sum(x2, na.rm=TRUE)
sd(x2, na.rm=TRUE)
class(TRUE)
#+end_src


* Funciones

** Definición de funciones
*** Para definir una función usamos la función =function=
#+begin_src R 
  myFun <- function(x, y) x + y
  myFun(3, 4)
  class(myFun)
#+end_src

*** Definir una función a partir de funciones
#+begin_src R 
foo  <-  function(x, ...){
  mx <- mean(x, ...)
  medx <- median(x, ...)
  sdx <- sd(x, ...)
  c(mx, medx, sdx)
  }
#+end_src
O en forma resumida:
#+begin_src R 
foo <- function(x, ...){c(mean(x, ...), median(x, ...), sd(x, ...))}
#+end_src


** Uso de funciones
*** Y ahora usamos la función con vectores
#+begin_src R 
foo(1:10)

rnorm(100)
help(rnorm)
foo(rnorm(1e5))
#+end_src

*** Y también funciona con matrices
#+begin_src R 
rowMeans(M)
apply(M, 1, foo)
colMeans(M)
apply(M, 2, foo)
#+end_src

*** La función =outer=
#+begin_src R 
f <- function(x, y)x^2+y^2
f
f(1, 2)
x
y

z <- outer(x, y, f)
z
image(x, y, z)
#+end_src


* Listas y data.frame

** Listas
*** Para crear una lista usamos la función =list=
#+begin_src R 
  lista <- list(a=c(1,3,5),
                b=c('l', 'p', 'r', 's'),
                c=3)
  class(list)
  class(lista)
#+end_src

*** Podemos acceder a los elementos...
- Por su nombre
#+begin_src R 
lista
lista$a
lista$b
lista$c
#+end_src

- o por su índice
#+begin_src R 
  lista[1]
  lista[[1]]
  
  class(lista[1])
  class(lista[[1]])
  
  lista[2]
  lista[[2]]
  
  class(lista[2])
  class(lista[[2]])
#+end_src

*** Cada elemento es diferente
- Clase
#+begin_src R 
class(lista)
class(lista$a)
class(lista$b)
class(lista$c)
#+end_src
- Longitud
#+begin_src R 
length(lista)
length(lista$a)
length(lista$b)
length(lista$c)
#+end_src

*** Para matrices =apply=, para listas =lapply= y =sapply=
#+begin_src R 
lapply(lista, length)
sapply(lista, length)

lista <- list(x = 1:10,
              y = seq(0, 10, 2),
              z = rnorm(30))
lista

lapply(lista, sum)
lapply(lista, median)
lapply(lista, foo)
#+end_src


** Data.frame
*** Para crear un =data.frame=...
#+begin_src R 
  df <- data.frame(x = 1:10,
                   y = rnorm(10),
                   z = 0)
  
  length(df)
  dim(df)
#+end_src
*** Podemos acceder a los elementos
- Por su nombre
#+begin_src R 
df$x
df$y
df$z
#+end_src

- Por su índice
#+begin_src R 
df
df[1,]
df[,1]
df[,2]
#+end_src

*** La regla del reciclaje
#+begin_src R 
  year <- 2011
  month <- 1:12
  class <- c('A', 'B', 'C')
  vals <- rnorm(12)
  
  dats <- data.frame(year, month, class, vals)
  dats
#+end_src
*** La función =expand.grid=

#+begin_src R 
  x <- y <- seq(-4*pi, 4*pi, len=200)
  df <- expand.grid(x = x, y = y)
  head(df)
  tail(df)
  summary(df)
  dim(df)
  names(df)
#+end_src

*** Funciones sobre =data.frame=

#+begin_src R 
  circles <- function(object){
    r <- with(object, sqrt(x^2 + y^2))
    res <- cos(r^2)*exp(-r/6)
    res}
  
  df$result <- circles(df)
  head(df)
#+end_src

*** Una imagen vale más que mil palabras
#+begin_src R 
  library(lattice)
  levelplot(result ~ x + y, data=df)
#+end_src

*** Unir dos =data.frame=
- Primero construimos un =data.frame= de ejemplo
#+begin_src R 
  USStates <- as.data.frame(state.x77)
  USStates$Name <- rownames(USStates)
  rownames(USStates) <- NULL
#+end_src
- Lo partimos en estados "fríos" y estados "grandes"
#+begin_src R 
  coldStates <- USStates[USStates$Frost>150, c('Name', 'Frost')]
  largeStates <- USStates[USStates$Area>1e5, c('Name', 'Area')]
#+end_src
- Unimos los dos conjuntos (estados "fríos" y "grandes")
#+begin_src R 
  merge(coldStates, largeStates)
#+end_src

*** =merge= usa =match=
- Estados grandes que también son fríos
#+begin_src R 
  idxLarge <- match(largeStates$Name,
                    coldStates$Name,
                    nomatch=0)
  idxLarge
  
  largeStates[idxLarge,]
#+end_src

- Estados frios que también son grandes
#+begin_src R 
  idxCold <- match(coldStates$Name,
                   largeStates$Name,
                   nomatch=0)
  idxCold
  
  coldStates[idxCold,]
#+end_src

* Factores, fechas y caracteres
** =factor= 
*** Una variable numérica que nos servirá para el ejemplo
#+begin_src R 
  N <- 100
  edad <- sample(seq(18, 40, 1), N, replace=TRUE)
  summary(edad)
#+end_src

*** Una variable cualitativa se define con =factor=
- Ahora es un =character=
#+begin_src R 
  sexo <- sample(c('H', 'M'), N, replace=TRUE)
  class(sexo)
  summary(sexo)
#+end_src  
- Ahora es un =factor=
#+begin_src R 
  sexo <- factor(sexo)
  class(sexo)
  summary(sexo)
  levels(sexo)
  nlevels(sexo)
#+end_src

*** Los =factor= sirven para agrupar

- Con la función =table=
#+begin_src R 
  table(edad, sexo)
  table(edad > 30, sexo)
  table(edad %in% 20:30, sexo)
#+end_src

- Con =tapply= o =aggregate=
#+begin_src R 
tapply(edad,sexo, mean)
aggregate(edad ~ sexo, FUN=median)
#+end_src

*** Los factores sirven para separar
#+begin_src R 
  edadSexo <- split(edad, sexo)
  class(edadSexo)
  
  sapply(edadSexo, mean)
#+end_src

*** Los =factor= se pueden generar a partir de variables numéricas
- Por ejemplo, con =cut=
#+begin_src R 
  gEdad <- cut(edad, breaks=4)
  class(gEdad)
  levels(gEdad)
  nlevels(gEdad)
#+end_src

- Nuevamente =table=
#+begin_src R 
  table(gEdad)
  table(gEdad, sexo)
#+end_src

** Fechas

*** =Date=
#+begin_src R 
  as.Date('2013-02-06')
  as.Date('2013/02/06')
  
  as.Date('06.02.2013')
  as.Date('06.02.2013', format='%d.%m.%Y')
  
  as.Date(37, origin='2013-01-01')
#+end_src

*** Secuencias temporales con =Date=
#+begin_src R 
  seq(as.Date('2004-01-01'), by='day', length=10)
  seq(as.Date('2004-01-01'), by='month', length=10)
  seq(as.Date('2004-01-01'), by='10 day', length=10)
#+end_src

*** POSIXct
#+begin_src R 
  as.POSIXct('2013-02-06')
  ISOdate(2013, 2, 7)
#+end_src

#+begin_src R 
hoy <- as.POSIXct('2013-02-06')

help(format.POSIXct)
format(hoy, '%Y')
format(hoy, '%d')
format(hoy, '%m')
format(hoy, '%b')
format(hoy, '%d de %B de %Y')
#+end_src

#+begin_src R 
  hora <- Sys.time()
  hora
  
  format(hora, '%H:%M:%S')
  format(hora, '%H horas, %M minutos y %S segundos')
#+end_src

*** Secuencias temporales con =POSIXct=
#+begin_src R 
seq(as.POSIXct('2004-01-01'), by='month', length=10)
seq(as.POSIXct('2004-01-01 10:00:00'), by='15 min', length=10)
#+end_src

*** Zonas horarias

#+begin_src R 
  as.POSIXct('2013-02-06 15:30:00', tz='GMT')
  as.POSIXct('2013-02-06 15:30:00', tz='Europe/Madrid')
#+end_src

#+begin_src R 
hawaii <- as.POSIXct('2013-02-06 15:30:00', tz='HST')
## Character
format(hawaii, tz='GMT')
## POSIXct
as.POSIXct(format(hawaii, tz='GMT'), tz='GMT')
#+end_src

** Caracteres

*** Bastan unas simples comillas

#+begin_src R 
  cadena <- "Hola mundo"
  class(cadena)
  nchar(cadena)
#+end_src

- Y aquí, ¿qué pasa?
#+begin_src R 
length(cadena)
cadena[1]
cadena[2]
#+end_src

*** Un vector de =character=
#+begin_src R 
  cadenaVec <- c("Hola mundo", "Hello world")
  nchar(cadenaVec)
  length(cadenaVec)
#+end_src

*** Para mostrarlos usamos =cat= o =print=

#+begin_src R 
  a = 2
  b = 3
  
  cat('La suma de', a, 'y', b, 'es', a + b)
  
  cat('La suma de', a, 'y', b, 'es', a + b, fill=TRUE)
  
  cat('La suma de', a, 'y', b, 'es', a + b, '\n',
      'La multiplicación de', a, 'por', b, 'es', a*b, '\n')
  
  cat('La suma de', a, 'y', b, 'es', a + b, '\n',
      'La multiplicación de', a, 'por', b, 'es', a*b, fill=15)
#+end_src

*** Los =character= se pueden unir...
- Primero sencillo
#+begin_src R 
  paste('Hello', 'World', sep='_')
  
  paste(cadenaVec)
  paste(cadenaVec, collapse='=')
#+end_src
- Y algo más complicado
#+begin_src R 
  paste('X', 1:5, sep='.')
  paste(c('A', 'B'), 1:5, sep='.')
  
  paste(c('A', 'B'), 1:5, sep='.', collapse='|')
#+end_src

*** ... y también se pueden separar...
#+begin_src R 
  strsplit(cadenaVec, split=' ')
  strsplit(cadenaVec, split='')
#+end_src

#+begin_src R 
  chSep <- strsplit(cadenaVec, split=' ')
  class(chSep)
  length(chSep)
  sapply(chSep, length)
  sapply(chSep, nchar)
#+end_src

*** ... y, por supuesto, manipular
#+begin_src R 
  sub('o', '0', 'Hola Mundo')
  gsub('o', '0', 'Hola Mundo')
  
  substring(cadena, 1) <- 'HOLA'
  cadena
  
  tolower(cadena)
  toupper(cadena)
#+end_src



* Bucles y condiciones
** Bucles =for=
*** =for=
#+begin_src R 
  for(n in c(2,5,10,20,50)) {
      x <- rnorm(n)
      cat(n,":", sum(x^2),"\n")
  }
  
#+end_src
** Condiciones con =if=, =else= e =ifelse=
*** =if=
#+begin_src R 
  x <- rnorm(10)
  x2 <- numeric(length(x))
  for (i in seq_along(x2)){
      if (x[i]<0) x2[i] <- 0 else x2[i] <- 1
      }
  cbind(x, x2)
#+end_src
*** =ifelse=
#+begin_src R 
  x <- rnorm(10)
  ifelse(x>0, 1, 0)
#+end_src
