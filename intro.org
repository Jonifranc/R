#+TITLE:     Introducción a R

#+SETUPFILE: config.org
#+OPTIONS: H:3
#+PROPERTY: results output
#+PROPERTY: exports both

* Introducción
** ¿Qué es =R=?
*** ¿Qué es =R=?						    
Es un entorno de programación orientado al cálculo, manipulación de datos, y representación gráfica, publicado como software libre con licencia GNU-GPL.
#+BEGIN_CENTER
 [[http://www.R-project.org]] 
#+END_CENTER

*** Para instalar =R=

- Windows: http://cran.es.r-project.org/bin/windows/base/
- Mac: http://cran.es.r-project.org/bin/macosx/
- Linux: http://cran.es.r-project.org/bin/linux/

*** Interfaces para R

- En mi opinión, la mejor interfaz para R es [[http://ess.r-project.org/][ESS]] con [[http://www.gnu.org/software/emacs/][Emacs]]. 
- Para los que prefieren una interfaz gráfica es recomendable [[http://www.rstudio.com/ide/][RStudio]]:
  - Instalador: http://www.rstudio.com/ide/download/desktop
  - Introducción: http://www.rstudio.com/ide/docs/using/source



*** R está muy bien documentado
- [[http://cran.r-project.org/manuals.html][Manuales Oficiales]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-intro.html][Introduction to R]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-data.html][R Data Import/Export]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-admin.html][R Installation and Administration]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html][Writing R Extensions]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-lang.html][R language definition]]

  - [[http://cran.r-project.org/doc/manuals/r-release/R-ints.html][R Internals]]

- [[http://cran.r-project.org/other-docs.html][Manuales externos]]

*** Otros recursos de información

- [[http://www.r-project.org/mail.html][Listas de correo]] (sin olvidar respetar [[http://www.r-project.org/posting-guide.html][estos consejos]])
  - Generales: R-announce, R-help, R-devel
  - Special Interest Group (SIG) mailing lists
- [[http://www.r-bloggers.com][R-bloggers]]
- [[http://stackoverflow.com/questions/tagged/r][stackoverflow]]

*** R es un proyecto colaborativo
- Una de las grandes riquezas de R es la cantidad de paquetes (más
  de 6000 actualmente) que amplían sus funcionalidades.  
- La lista completa está en http://cran.es.r-project.org/web/packages/.
- Las CRAN Task Views agrupan por temáticas:
  [[http://cran.r-project.org/web/views/]]

*** Más de 6000 paquetes disponibles
- Algunos vienen instalados y se cargan al empezar:
#+begin_src R :eval no
  sessionInfo()
#+end_src
*** Más de 6000 paquetes disponibles
- Otros vienen instalados pero hay que cargarlos:
#+begin_src R :eval no 
  library(lattice)
  packageVersion('lattice')
#+end_src
#+begin_src R :eval no
  packageDescription('lattice')
#+end_src

*** Más de 6000 paquetes disponibles
- Otros hay que instalarlos y después cargarlos:
#+begin_src R :eval no
  install.packages('data.table')
  library('data.table')
  packageDescription('data.table')
#+end_src


** Guía para usar el curso

*** Interfaz gráfica: RStudio
[[file:figs/rstudio-ubuntu.png]]

*** Interfaz gráfica: RStudio
- La consola de R es el área en la que se ejecuta código (=Ctrl + 2=)
  - Indica con =>= que está listo para aceptar comandos.
  - Indica con =+= que está a la espera de completar comando (salir con =Esc=).
  - Permite recuperar comandos antiguos con flechas arriba y abajo.
- El área de código es donde se edita y almacena código (=Ctrl + 1=)
  - Escribir (y grabar) en área de código y enviar a consola (=Ctrl + Enter=)
  - Permite completar comandos con =TAB=
- Para la asignación =<-= usar =Alt + -=

*** Material
- Primero obtenemos una copia local del repositorio. Opciones:

  - Descargando el repositorio en formato [[https://github.com/oscarperpinan/intro/archive/master.zip][ZIP]]: descomprímelo en una ruta sencilla (por ejemplo, =C:\cursoR\= o =/home/miusuario/cursoR/=).

  - Usando =git=:
#+BEGIN_SRC sh :eval no
git clone git://github.com/oscarperpinan/intro.git
#+END_SRC

*** Material
- Todo el código del curso asume que la ruta de trabajo coincide con la carpeta local: definimos la ruta de trabajo con =setwd=
#+begin_src R :eval no
setwd('/ruta/de/copia/local/del/repositorio/')
#+end_src

- Comprobamos que todo ha ido bien. El resultado de la siguiente instrucción debe ser la estructura de carpetas y ficheros del repositorio:
#+begin_src R :eval no
dir()
#+end_src

*** Material
- Finalmente hay que instalar los paquetes que se emplean a lo largo del curso. Algunos ya vendrán instalados con tu distribución de R por ser paquetes recomendados. En la siguiente instrucción usamos el /CRAN mirror/ de la Oficina de Software Libre (CIXUG). 
#+begin_src R :eval no
install.packages(c('lattice', 'latticeExtra',
                   'RColorBrewer',
                   'zoo',
                   'reshape2', 'ggplot2'),
                 repos = 'http://ftp.cixug.es/CRAN')
#+end_src

*** Bloc de Notas

- Usaremos un bloc de notas colaborativo para escribir código juntos y resolver dudas. Está accesible en: https://etsidifv.titanpad.com/r-ice-upm

- La clave será comunicada al inicio de las clases.

* Objetos en R

*** Objetos en R

- Existen varios objetos en R:
  - Vectores
  - Listas
  - Funciones
  - ...
- A partir de estos objetos se definen varias clases:
  - =matrix=
  - =data.frame=
  - =factor=
  - =Date=, =POSIXct=
  - ...

** Vectores

*** Primeros pasos
#+begin_src R 
x <- 1:5
x
#+end_src
#+begin_src R
length(x)
#+end_src
#+begin_src R
class(x)
#+end_src


*** Generar vectores con =seq=
#+begin_src R 
x1 <- seq(1, 100, by=2)
x1
#+end_src

#+begin_src R
seq(1, 100, length=10)
#+end_src


*** Unir vectores con =c=
#+begin_src R
x <- c(1, 2, 3)
x
#+end_src

#+begin_src R 
x <- seq(1, 100, length=10)
y <- seq(2, 100, length=50)
z <- c(x, y)
z
#+end_src


*** Operaciones sencillas con vectores
#+begin_src R 
  x <- 1:5
  x + 1
#+end_src

#+begin_src R
  x^2
#+end_src

#+begin_src R
  y <- 1:10
  x + y
#+end_src

#+begin_src R
  x * y
#+end_src

#+begin_src R
  x^2 + y^3
#+end_src



*** Tu turno
** Matrices
*** Construir una matriz
#+begin_src R 
  z <- 1:12
  M  <-  matrix(z, nrow=3)
  M
#+end_src

#+begin_src R
  class(M)
#+end_src

#+begin_src R
  dim(M)
#+end_src

#+begin_src R
  summary(M)
#+end_src

*** Matrices a partir de vectores: =rbind= y =cbind=
#+begin_src R 
z <- y <- x <- 1:10

M <- cbind(x, y, z)
M
#+end_src

#+begin_src R
M <- rbind(x, y, z)
M
#+end_src


*** Tu turno
** Listas
*** Para crear una lista usamos la función =list=
#+begin_src R 
lista <- list(a=c(1,3,5),
              b=c('l', 'p', 'r', 's'),
              c=3)
lista
#+end_src

#+begin_src R
class(lista)
#+end_src

#+begin_src R
length(lista)
#+end_src



** Data.frame
*** Para crear un =data.frame=...
#+begin_src R 
  df <- data.frame(x = 1:5,
                   y = rnorm(10),
                   z = 0)
  df
#+end_src

#+begin_src R
  length(df)
#+end_src

#+begin_src R
  dim(df)
#+end_src

*** La regla del reciclaje
#+begin_src R 
  year <- 2011
  month <- 1:12
  class <- c('A', 'B', 'C')
  vals <- rnorm(12)
  
  dats <- data.frame(year, month, class, vals)
  dats
#+end_src
*** La función =expand.grid=

#+begin_src R 
  x <- y <- seq(-4*pi, 4*pi, len=200)
  df <- expand.grid(x = x, y = y)
#+end_src

#+begin_src R
  head(df)
#+end_src

#+begin_src R
  tail(df)
#+end_src

*** Tu turno
** Funciones

*** Para definir una función usamos la función =function=
#+begin_src R 
myFun <- function(x, y) x + y
myFun
#+end_src

#+begin_src R
  class(myFun)
#+end_src


#+begin_src R
  myFun(3, 4)
#+end_src

*** Podemos construir a partir de funciones
#+begin_src R 
foo  <-  function(x, ...){
  mx <- mean(x, ...)
  medx <- median(x, ...)
  sdx <- sd(x, ...)
  c(mx, medx, sdx)
  }
#+end_src
O en forma resumida:
#+begin_src R 
foo <- function(x, ...){c(mean(x, ...), median(x, ...), sd(x, ...))}
#+end_src


*** Y ahora usamos la función con vectores
#+begin_src R 
foo(1:10)
#+end_src

#+begin_src R
foo(rnorm(1e5))
#+end_src

*** Tu turno
* Indexado
** Vectores
*** Indexado numérico

#+begin_src R 
  x <- seq(1, 100, 2)
  x
#+end_src

#+begin_src R
  x[1:5]
#+end_src

#+begin_src R
  x[10:5]
#+end_src

*** Indexado con condiciones lógicas

#+begin_src R 
  x == 37
#+end_src

#+begin_src R
  x[x == 37]
#+end_src

#+begin_src R
  x[x != 9]
#+end_src

#+begin_src R
  x[x > 20]
#+end_src
     

*** Indexado con condiciones múltiples

#+begin_src R 
z <- seq(-10, 10, by = .5)
z
#+end_src

#+begin_src R
z[z < -5 | z > 5]
#+end_src

#+begin_src R
cond <- (z >= 0 & z <= 5)
cond
#+end_src

#+begin_src R
z[cond]
#+end_src

*** Tu turno
** Matrices
*** Indexado de matrices
#+begin_src R
M[1:2, ]
#+end_src

#+begin_src R
M[1:2, 2:3]
#+end_src

#+begin_src R
M[1, c(1, 4)]
#+end_src

*** Indexado de matrices
#+begin_src R
M[-1,]
#+end_src

#+begin_src R
M[-c(1, 2),]
#+end_src

*** Tu turno
** Listas
*** Podemos acceder a los elementos...
- Por su nombre
#+begin_src R
lista$a
#+end_src

- o por su índice
#+begin_src R 
  lista[1]
#+end_src

#+begin_src R
  lista[[1]]
#+end_src


** Data Frame
*** Podemos acceder a los elementos
#+begin_src R 
  df <- data.frame(x = 1:5,
                   y = rnorm(10),
                   z = 0)
#+end_src

- Por su nombre (como una lista)
#+begin_src R 
df$x
#+end_src

- Por su índice (como una matriz)
#+begin_src R 
df[1,]
#+end_src

#+begin_src R
df[,1]
#+end_src

*** Tu turno
* Bucles
** Matrices
*** La función =apply=
#+begin_src R 
apply(M, 1, sum)
#+end_src

#+begin_src R
rowSums(M)
#+end_src

#+begin_src R
apply(M, 2, mean)
#+end_src

#+begin_src R
colMeans(M)
#+end_src

*** Tu turno
** Listas / =data.frame=
*** =lapply= y =sapply=
#+begin_src R
lista <- list(x = 1:10,
              y = seq(0, 10, 2),
              z = rnorm(30))
lapply(lista, sum)
#+end_src

#+begin_src R
sapply(lista, sum)
#+end_src

*** Tu turno
** Bucles =for=
*** =for=
- En =R= suele usarse más la familia de funciones =*apply= con funciones vectorizadas.
#+begin_src R
for(n in c(2,5,10,20,50)) {
    x <- rnorm(n)
    cat(n,":", sum(x^2),"\n")
}
#+end_src
** Condiciones con =if=, =else= e =ifelse=
*** =if=
- En =R= suele usarse más el indexado lógico (vectorizado).
#+begin_src R 
  x <- rnorm(10)
  x2 <- numeric(length(x))
  for (i in seq_along(x2)){
      if (x[i]<0) x2[i] <- 0 else x2[i] <- 1
      }
  cbind(x, x2)
#+end_src
*** =ifelse=
#+begin_src R 
x <- rnorm(10)
x
#+end_src
#+begin_src R
ifelse(x>0, 1, 0)
#+end_src


