#+TITLE:     Funciones

#+SETUPFILE: config.org
#+OPTIONS: H:2
#+PROPERTY: header-args :results output :exports both :session R:funciones :tangle yes :comments org
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}[plain]\tableofcontents[currentsection,sectionstyle=show/shaded]\end{frame}}


* Conceptos Básicos

** Fuentes de información
- [[http://cran.r-project.org/doc/manuals/R-intro.html][R introduction]]
- [[http://cran.r-project.org/doc/manuals/R-lang.html][R Language Definition]]
- [[http://www.springer.com/gb/book/9780387759357][Software for Data Analysis]]
** Componentes de una función
- Una función se define con =function=
#+BEGIN_CENTER
=name <- function(arg_1, arg_2, ...) expression=
#+END_CENTER
- Está compuesta por:
  - Nombre de la función (=name=)
  - Argumentos (=arg_1=, =arg_2=, =...=)
  - Cuerpo (=expression=): emplea los argumentos para generar un resultado
** Mi primera función
- Definición
#+begin_src R 
myFun <- function(x, y)
{
    x + y
}
#+end_src
- Argumentos
#+begin_src R 
formals(myFun)
#+end_src
- Cuerpo
#+begin_src R 
body(myFun)
#+end_src

** Mi primera función
#+begin_src R 
myFun(1, 2)
#+end_src
#+begin_src R 
myFun(1:10, 21:30)
#+end_src
#+begin_src R 
myFun(1:10, 3)
#+end_src

** Argumentos: nombre y orden

Una función identifica sus argumentos por su nombre y por su orden (sin nombre)

#+begin_src R 
power <- function(x, exp)
{
    x^exp
}
#+end_src

#+begin_src R 
power(x=1:10, exp=2)
#+end_src

#+begin_src R 
power(1:10, exp=2)
#+end_src

#+begin_src R 
power(exp=2, x=1:10)
#+end_src

** Argumentos: valores por defecto
- Se puede asignar un valor por defecto a los argumentos
#+begin_src R 
power <- function(x, exp = 2)
{
    x ^ exp
}
#+end_src
#+begin_src R 
power(1:10)
#+end_src
#+begin_src R 
power(1:10, 2)
#+end_src

** Funciones sin argumentos
#+begin_src R 
hello <- function()
{
    print('Hello world!')
}
#+end_src 
#+begin_src R 
hello()
#+end_src

** Argumentos sin nombre: =...=
#+begin_src R 
pwrSum <- function(x, power, ...)
{
    sum(x ^ power, ...)
}
#+end_src
#+begin_src R 
x <- 1:10
pwrSum(x, 2)
#+end_src
#+begin_src R 
x <- c(1:5, NA, 6:9, NA, 10)
pwrSum(x, 2)
#+end_src
#+begin_src R 
pwrSum(x, 2, na.rm=TRUE)
#+end_src

** Argumentos ausentes: =missing=
#+begin_src R 
suma10 <- function(x, y)
{
    if (missing(y)) y <- 10
    x + y
}
#+end_src
#+begin_src R 
suma10(1:10)
#+end_src

** Control de errores: =stopifnot=
#+begin_src R 
foo <- function(x, y)
{
    stopifnot(is.numeric(x) & is.numeric(y))
    x + y
}
#+end_src

#+begin_src R 
foo(1:10, 21:30)
#+end_src

#+begin_src R 
foo(1:10, 'a')
#+end_src

** Control de errores: =stop=
#+begin_src R 
foo <- function(x, y){
    if (!(is.numeric(x) & is.numeric(y))){
        stop('arguments must be numeric.')
    } else { x + y }
} 
#+end_src
#+begin_src R 
foo(2, 3)
#+end_src
#+begin_src R 
foo(2, 'a')
#+end_src

** Mensajes para el usuario
=stop= para la ejecución y emite un mensaje de error
#+begin_src R
stop('Algo no ha ido bien.')
#+end_src
=warning= no interfiere en la ejecución pero añade un mensaje a la cola de advertencias
#+begin_src R
warning('Quizás algo no es como debiera...')
#+end_src
=message= emite un mensaje (*no usar =cat= o =print=*)
#+begin_src R
message('Todo en orden por estos lares.')
#+end_src

* Lexical scope

** Clases de variables
Las variables que se emplean en el cuerpo de una función pueden
dividirse en:
  - Parámetros formales (argumentos): =x=, =y=
  - Variables locales (definiciones internas): =z=, =w=, =m=
  - Variables libres: =a=, =b=
#+begin_src R 
myFun <- function(x, y){
    z <- x^2
    w <- y^3
    m <- a*z + b*w
    m
}
#+end_src
#+begin_src R 
a <- 10
b <- 20
myFun(2, 3)
#+end_src

** Lexical scope

- Las variables libres deben estar disponibles en el entorno
  (=environment=) en el que la función ha sido creada.
#+begin_src R 
environment(myFun) 
#+end_src
#+begin_src R 
ls()
#+end_src

** Lexical scope: funciones anidadas
#+begin_src R 
anidada <- function(x, y){
    xn <- 2
    yn <- 3
    interna <- function(x, y)
    {
        sum(x^xn, y^yn)
    }
    print(environment(interna))
    interna(x, y)
}
#+end_src

#+begin_src R 
anidada(1:3, 2:4)
#+end_src

#+begin_src R 
sum((1:3)^2, (2:4)^3)
#+end_src
** Lexical scope: funciones anidadas
#+begin_src R 
xn
#+end_src

#+begin_src R 
yn
#+end_src

#+begin_src R 
interna
#+end_src

** Funciones que devuelven funciones
#+begin_src R 
constructor <- function(m, n){
    function(x)
    {
        m*x + n
    }
}
#+end_src

#+begin_src R 
myFoo <- constructor(10, 3)
myFoo
#+end_src

#+begin_src R
## 10*5 + 3
myFoo(5)
#+end_src
** Funciones que devuelven funciones
#+begin_src R 
class(myFoo)
#+end_src
#+begin_src R 
environment(myFoo)
#+end_src
#+begin_src R 
ls()
#+end_src
#+begin_src R 
ls(env = environment(myFoo))
#+end_src
#+begin_src R 
get('m', env = environment(myFoo))
#+end_src
#+begin_src R 
get('n', env = environment(myFoo))
#+end_src

* Debug

** Post-mortem: =traceback=
#+begin_src R 
sumSq <- function(x, ...){
    sum(x ^ 2, ...)
}

sumProd <- function(x, y, ...){
    xs <- sumSq(x, ...)
    ys <- sumSq(y, ...)
    xs * ys
}
#+end_src
#+begin_src R 
sumProd(rnorm(10), runif(10))
#+end_src
#+begin_src R 
sumProd(rnorm(10), letters[1:10])
#+end_src
#+begin_src R 
traceback()
#+end_src

** Analizar antes de que ocurra: =debug=
- Activa la ejecución paso a paso de una función
#+begin_src R
debug(sumProd)
#+end_src
- Cada vez que se llame a la función, su cuerpo se ejecuta línea a línea y los resultados de cada paso pueden ser inspeccionados.
- Los comandos disponibles son:
  - =n= o intro: avanzar un paso.
  - =c=: continua hasta el final del contexto actual (por ejemplo,
    terminar un bucle).
  - =where=: entrega la lista de todas las llamadas activas.
  - =Q=: termina la inspección y vuelve al nivel superior.
- Para desactivar el análisis:
#+begin_src R
undebug(sumProd)
#+end_src

** Analizar antes de que ocurra: =trace=
- =trace= permite mayor control que =debug=
#+begin_src R
trace(sumProd, tracer=browser, exit=browser)
#+end_src
- La función queda modificada
#+begin_src R
sumProd
#+end_src
#+begin_src R
body(sumProd)
#+end_src

** Analizar antes de que ocurra: =trace=
- Los comandos =n= y =c= cambian respecto a =debug=:
  - =c= o intro: avanzar un paso.
  - =n=: continua hasta el final del contexto actual (por ejemplo,
    terminar un bucle).
- Para desactivar
#+begin_src R
untrace(sumProd)
#+end_src

** Más recursos
- Debugging en RStudio
  - [[https://support.rstudio.com/hc/en-us/articles/205612627-Debugging-with-RStudio][Artículo]]
  - [[https://vimeo.com/97831988][Vídeo]]
- [[http://adv-r.had.co.nz/Exceptions-Debugging.html][/Debugging/ explicado por H. Wickham]]
 
* Profiling
** ¿Cuánto tarda mi función? =system.time=

#+begin_src R 
noise <- function(sd)rnorm(1000, mean=0, sd=sd)
#+end_src
#+begin_src R 
sumNoise <- function(nComponents){
    vals <- sapply(seq_len(nComponents), noise)
    rowSums(vals)
}
#+end_src
#+begin_src R 
system.time(sumNoise(1000))
#+end_src
** ¿Cuánto tarda cada parte de mi función?: =Rprof=
- Usaremos un fichero temporal
#+begin_src R 
tmp <- tempfile()
#+end_src
- Activamos la toma de información
#+begin_src R 
Rprof(tmp)
#+end_src
- Ejecutamos el código a analizar
#+begin_src R 
zz <- sumNoise(1000)
#+end_src
   
** ¿Cuánto tarda cada parte de mi función?: =Rprof=
- Paramos el análisis
#+begin_src R 
Rprof()
#+end_src
- Extraemos el resumen
#+begin_src R 
summaryRprof(tmp)
#+end_src


* Miscelánea
** =do.call= 
- Ejemplo: sumar los componentes de una lista
#+begin_src R 
lista <- list(a = rnorm(100),
              b = runif(100),
              c = rexp(100))
with(lista, sum(a + b + c))
#+end_src
- En lugar de nombrar los componentes, creamos una llamada a una
  función con =do.call=
#+begin_src R 
do.call(sum, lista)
#+end_src
** =do.call=

- Se emplea frecuentemente con el resultado de =lapply=
#+begin_src R 
  x <- rnorm(5)
  ll <- lapply(1:5, function(i)x^i)
  do.call(rbind, ll)
#+end_src
- Este mismo ejemplo puede resolverse con =sapply=
#+begin_src R 
  sapply(1:5, function(i)x^i)
#+end_src

** =Reduce=
- Combina sucesivamente los elementos de un objeto aplicando una
  función binaria
#+begin_src R 
## (((1+2)+3)+4)+5
Reduce('+', 1:5)
#+end_src
** =Reduce=
#+begin_src R 
## (((1/2)/3)/4)/5
Reduce('/', 1:5)
#+end_src

#+begin_src R 
foo <- function(u, v)u + 1 /v
Reduce(foo, c(3, 7, 15, 1, 292))
## equivalente a
## foo(foo(foo(foo(3, 7), 15), 1), 292)
#+end_src
#+begin_src R
Reduce(foo, c(3, 7, 15, 1, 292), right=TRUE)
## equivalente a
## foo(3, foo(7, foo(15, foo(1, 292))))
#+end_src
** Funciones recursivas
- [[http://en.wikibooks.org/wiki/R_Programming/Working_with_functions#Functions_as_Objects][Serie de Fibonnaci]]
#+begin_src R 
fib <- function(n){
    if (n>2) {
        c(fib(n-1),
          sum(tail(fib(n-1),2)))
    } else if (n>=0) rep(1,n)
}
#+end_src
#+begin_src R 
fib(10)
#+end_src
