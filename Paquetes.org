#+TITLE:     Crear paquetes en R
#+AUTHOR:    Oscar Perpiñán Lamigueiro
#+EMAIL:     oscar.perpinan@gmail.com
#+DATE:      Marzo de 2013
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  es
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+BEAMER_FRAME_LEVEL: 2
#+LATEX_CLASS_OPTIONS: [xcolor={usenames,svgnames,dvipsnames}]
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}[plain]\tableofcontents[currentsection,hideallsubsections]\end{frame}}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}, commentstyle=\color{gray!90}, basicstyle=\ttfamily\small, columns=fullflexible, breaklines=true,linewidth=\textwidth, backgroundcolor=\color{gray!23}, basewidth={0.5em,0.4em}, literate={á}{{\'a}}1 {ñ}{{\~n}}1 {é}{{\'e}}1 {ó}{{\'o}}1 {º}{{\textordmasculine}}1}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \usefonttheme{serif}
#+LATEX_HEADER: \usecolortheme{rose}  
#+LATEX_HEADER: \usetheme{Goettingen}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=Blue, urlcolor=Blue}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\footnotesize, formatcom = {\color{black!70}}}

* Introducción

** Definiciones previas

Definiciones extraídas de [[http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf][Creating R Packages: a tutorial]]
- *Package*: An extension of the R base system with code, data and
  documentation in standardized format.
- *Library*: A directory containing installed packages.
- *Repository*: A website providing packages for installation.
- *Source*: The original version of a package with human-readable text and code.
- *Binary*: A compiled version of a package with computer-readable
  text and code, may work only on a specific platform.
- *Base packages*: Part of the R source tree, maintained by R Core.
- *Recommended packages*: Part of every R installation, but not
  necessarily maintained by R Core.
- *Contributed packages*: All the rest. 

** ¿Por qué crear y publicar un paquete para =R=?

- Es una herramienta cómoda para mantener colecciones coherentes de funciones
  y datos.
- Permite publicar código de forma que pueda ser empleado por
  otros siguiendo unas estructuras comunes.
- La estructura de un paquete obliga a organizar, limpiar y
  documentar el código.
- Al distribuir las herramientas para que otros puedan usarlas, se
  obtiene realimentación sobre lo publicado, de forma que se
  aumenta su robustez, se amplian sus funcionalidades y se conecta
  con otras herramientas y proyectos.
- "As we enjoy great advantages from the inventions of others, we
  should be glad of an opportunity to serve others by any
  invention of ours, and this we should do freely and generously."

** Algunos consejos genéricos

Extraído de [[http://arxiv.org/abs/1210.0530][Best Practices for Scientific Computing]]

- Write programs for people, not computers.
- Automate repetitive tasks
- Use the computer to record history
- Make incremental changes
- Use version control
- Don't repeat yourself (or others)
- Plan for mistakes
- Optimize software only after it works correctly
- Document design and purpose, not mechanics
- Collaborate

** Fuentes de Información

- [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html][Writing R Extensions]]
- [[http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf][Creating R Packages: a tutorial]]

* Crear un paquete en R

** Estructura
- Las fuentes de un paquete de =R= están contenidas en un
  directorio que contiene al menos:
  - Los ficheros DESCRIPTION y NAMESPACE
  - Los subdirectorios:
    - =R=: código en ficheros .R
    - =man=: páginas de ayuda de las funciones, métodos y clases
      contenidos en el paquete.
- Esta escructura puede ser generada con =package.skeleton=.

** DESCRIPTION
- El fichero DESCRIPTION contiene la información básica sobre el
  paquete con un formato preestablecido:
#+begin_example
     Package: pkgname
     Version: 0.5-1
     Date: 2004-01-01
     Title: My First Collection of Functions
     Authors@R: c(person("Joe", "Developer", role = c("aut", "cre"),
                          email = "Joe.Developer@some.domain.net"),
                   person("Pat", "Developer", role = "aut"),
                   person("A.", "User", role = "ctb",
     	             email = "A.User@whereever.net"))
     Author: Joe Developer and Pat Developer, with contributions from A. User
     Maintainer: Joe Developer <Joe.Developer@some.domain.net>
     Depends: R (>= 1.8.0), nlme
     Suggests: MASS
     Description: A short (one paragraph) description of what
       the package does and why it may be useful.
     License: GPL (>= 2)
     URL: http://www.r-project.org, http://www.another.url
#+end_example
- Los campos =Package=, =Version=, =License=, =Title=, =Author= y
  =Maintainer= son obligatorios.
** NAMESPACE
- =R= usa un sistema de gestión de /espacio de nombres/ que
  permite al autor del paquete especificar:
  - las variables del paquete que se exportan (y son, por tanto,
    accesibles a los usuarios)
  - las variables que se importan de otros paquetes.
  - las clases y métodos =S3= y =S4= que deben registrarse.
- Este mecanismo queda definido en el contenido del fichero
  =NAMESPACE=.
** NAMESPACE
- El =NAMESPACE= controla la estrategia de busqueda de variables
  que utilizan las funciones del paquete:
  - En primer lugar busca entre las creadas localmente (por el código de la carpeta =R/=).
  - En segundo lugar busca entre las variables importadas
    explicitamente de otros paquetes.
  - En tercer lugar busca en el =NAMESPACE= del paquete =base=.
  - Por último busca siguiendo el camino habitual (ver el
    resultado de =search()=)

** NAMESPACE
- Para exportar las variables =f= y =g=:
#+begin_src R 
export(f, g)
#+end_src
- Para importar *todas* las variables del paquete =pkgExt=:
#+begin_src R 
import(pkgExt)
#+end_src
- Para importar las variables =var1= y =var2= del paquete
  =pkgExt=:
#+begin_src R 
importFrom(pkgExt, var1, var2)
#+end_src

** NAMESPACE
- Para registar el método =S3= =print= para la clase =myClass=:
#+begin_src R 
S3method(print, foo)
#+end_src
- Para registrar las clases =S4= =class1= y =class2=:
#+begin_src R 
exportClasses(class1, class2)
#+end_src
- Para registrar los métodos =S4= =method1= y =method2=:
#+begin_src R 
exportMethods(method1, method2)
#+end_src
- Para importar métodos y clases =S4= de otro paquete:
#+begin_src R 
importClassesFrom(package, ...)
importMethodsFrom(package, ...)
#+end_src

** Documentación 
- Las páginas de ayuda de los objetos =R= se escriben usando el
  formato “R documentation” (Rd), un lenguaje similar a LaTeX.
- Es aconsejable seguir estas orientaciones: [[http://developer.r-project.org/Rds.html][Guidelines for Rd files]]
- Para generar el esqueleto de un fichero Rd es aconsejable usar:
  - =prompt=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-functions][genérica]]
  - =promptClass= y =promptMethods=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-S4-classes-and-methods][clases y métodos]].
  - =promptPackage=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-packages][paquete]]
  - =promptData=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-data-sets][datos]]
- Todos los comandos disponibles están en el documento [[http://developer.r-project.org/parseRd.pdf][Parsing Rd
  files]].

** 
#+begin_example
  \name{load}
  \alias{load}
  \title{Reload Saved Datasets}
  \description{
    Reload the datasets written to a file with the function
    \code{save}.
  }
  \usage{
    load(file, envir = parent.frame())
  }
  \arguments{
  \item{file}{a connection or a character string giving the
      name of the file to load.}
  \item{envir}{the environment where the data should be
      loaded.}
  }
  \seealso{
    \code{\link{save}}.
  }
  \examples{
    ## save all data
    save(list = ls(), file= "all.RData")
    
    ## restore the saved values to the current environment
    load("all.RData")
    
    ## restore the saved values to the workspace
    load("all.RData", .GlobalEnv)
  }
  \keyword{file}
#+end_example

* Publicar un paquete

** Itinerario
- Comprobar
#+begin_example
R CMD check myPackage/
#+end_example
- Construir
#+begin_example 
R CMD build myPackage/
#+end_example
- Publicar (o actualizar) en un repositorio

** Comprobar
- Comprobar un directorio (desde línea de comandos):
#+begin_example
R CMD check myPackage/
#+end_example
- Comprobar un paquete ya construido (desde línea de comandos):
#+begin_example
R CMD check myPackage.tar.gz
#+end_example
- Esta comprobación incluye más de 20 puntos de prueba detallados
  en el manual [[http://cran.r-project.org/doc/manuals/R-exts.html#Checking-packages][Writing R extensions]].
** Construir
*** Fuente o binario						    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    Se puede construir un fichero fuente en formato /tarball/
    (independiente de la plataforma, habitual en sistemas Unix) o en
    forma binaria (dependiente de la plataforma, habitual para Windows y Mac).
*** Cómo hacerlo					    :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
- Fuente en formato /tarball/
  - El resultado es un fichero /tarball/ =myPackage.tar.gz= que
     se puede distribuir a cualquier sistema.
#+begin_example
R CMD build myPackage/
#+end_example
- Comprimido binario
   - El resultado es una copia comprimida de la versión
     *instalada* del paquete: depende del sistema operativo.
#+begin_example
R CMD INSTALL --build myPackage/
#+end_example

** Comprobar y construir en sistemas Windows

- Para paquetes sin código compilado (C, Fortran), también se puede usar
  =R CMD check= y =R CMD build= en un sistema Windows.
- Para generar un binario hay que usar =R CMD INSTALL --build=.
  - Es posible que haya que modificar la variables de entorno
    =TEMP= y =TMP= de forma que *sólo* contengan caracteres ASCII.
- Para paquetes con código compilado, o en caso de problemas con
  los comandos anteriores, hay que usar [[http://cran.r-project.org/bin/windows/Rtools/][Rtools]].
- Se pueden instalar fuentes /tarball/ con (ver [[http://cran.r-project.org/doc/manuals/R-admin.html#Windows-packages][R installation and administration]]):
#+begin_example
install.packages(myPackage.tar.gz, type='source')
#+end_example


** Repositorios
- El principal repositorio de paquetes estables es [[http://cran.r-project.org/][CRAN]].
  - Publicar en este repositorio conlleva la aceptación de unas [[http://cran.r-project.org/web/packages/policies.html][condiciones]].
  - Para publicar en CRAN hay que subir el fichero fuente
    /tarball/ resultado de =R CMD build= via FTP anónimo a la
    dirección ftp://CRAN.R-project.org/incoming/ y enviar un
    correo en texto plano a CRAN@R-project.org.
  - Es imprescindible haber comprobado el fichero con =R CMD check
    --as-cran= antes de subirlo al servidor FTP. El resultado de
    esta comprobación *no* debe contener errores ni advertencias
    (=warnings=).
  - Más detalle en el apartado Submission de las [[http://cran.r-project.org/web/packages/policies.html][condiciones de
    CRAN]] y en el manual [[http://cran.r-project.org/doc/manuals/R-exts.html#Submitting-a-package-to-CRAN][R Extensions]].

** Repositorios

- Otros repositorios destacables son:

  - [[http://r-forge.r-project.org/][R-Forge]] (versiones de desarrollo)

  - [[http://www.bioconductor.org/][Bioconductor]] (paquetes de bioinformática)

  - [[https://github.com/languages/R][Proyectos R en Github]] (versiones de desarrollo)

  - [[http://rforge.net/][RForge]] (versiones de desarrollo)

