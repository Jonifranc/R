#+TITLE:     Manejo de datos con R
#+AUTHOR:    Oscar Perpiñán Lamigueiro
#+EMAIL:     oscar.perpinan@gmail.com
#+DATE:      25 de Enero de 2013
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  es
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+BEAMER_FRAME_LEVEL: 2
#+LATEX_CLASS_OPTIONS: [xcolor={usenames,svgnames,dvipsnames}]
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Contenidos}\tableofcontents[currentsection]\end{frame}}
#+LATEX_HEADER: \lstset{keywordstyle=\color{blue}, commentstyle=\color{gray!90}, basicstyle=\ttfamily\small, columns=fullflexible, breaklines=true,linewidth=\textwidth, backgroundcolor=\color{gray!23}, basewidth={0.5em,0.4em}, literate={á}{{\'a}}1 {ñ}{{\~n}}1 {é}{{\'e}}1 {ó}{{\'o}}1 {º}{{\textordmasculine}}1}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \setbeamercovered{transparent}
#+LATEX_HEADER: \usefonttheme{serif} 
#+LATEX_HEADER: \usetheme{Goettingen}
#+LATEX_HEADER: \hypersetup{colorlinks=true, linkcolor=Blue, urlcolor=Blue}
#+PROPERTY:  tangle yes
#+PROPERTY:  comments org
#+PROPERTY:  session *R*
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\tiny, formatcom = {\color{black!70}}}

* Fuentes de datos
** Fuentes de datos

- [[http://stat.ethz.ch/R-manual/R-patched/library/datasets/html/00Index.html][The R Datasets Package]]

- [[http://www.bibsonomy.org/user/procomun/data?resourcetype%3Dbookmark][Enlaces en Bibsonomy]]

* Lectura de datos
** =setwd=, =getwd=, =dir=
#+begin_src R
  getwd()
  old <- setwd("~/R/intro")
  dir()
  dir(pattern='.R')
  dir('data')
#+end_src

** read.table
- Con un fichero local
#+begin_src R 
  download.file('http://oscarperpinan.github.com/spacetime-vis/data/CO2_GNI_BM.csv',
                destfile='data/CO2_GNI_BM.csv')
  
  CO2 <- read.table('data/CO2_GNI_BM.csv', header=TRUE, sep=',')
  head(CO2)
  
#+end_src
- Directamente de un enlace URL
#+begin_src R 
  CO2 <- read.table('http://oscarperpinan.github.com/spacetime-vis/data/CO2_GNI_BM.csv',
                  header=TRUE, sep=',')
  head(CO2)
#+end_src

** read.csv, read.csv2
- =read.csv= y =read.csv2= son como =read.table= con valores
  por defecto para encabezado y separadores

#+begin_src R 
  CO2 <- read.csv('data/CO2_GNI_BM.csv')
#+end_src

#+begin_src R 
  head(CO2)
  tail(CO2)
  summary(CO2)
  names(CO2)
#+end_src

* Datos agregados
** table
#+begin_src R 
  chromo <- data.frame(chromosome = gl(3,  10,
                       labels = c('A',  'B',  'C')),
                       probeset = gl(3,  10,
                       labels = c('X',  'Y',  'Z')),
                       ensg =  gl(3,  10,
                       labels = c('E1',  'E2',  'E3')),
                       symbol = gl(3,  10,
                       labels = c('S1',  'S2',  'S3')),
                       XXA_00 = rnorm(30),
                       XXA_36 = rnorm(30),
                       XXB_00 = rnorm(30))
#+end_src

#+begin_src R 
table(chromo$chromosome, df$XXA_00 > 0)
table(chromo$probeset, df$XXA_00 > -1 & df$XXA_00 < 1)
#+end_src
** xtabs
#+begin_src R 
  xtabs(XXA_00 > 1 ~ chromosome + probeset,
        data=chromo)
#+end_src
** tapply
#+begin_src R :results output :exports both
  tapply(CO2$X2000, CO2$Indicator.Name,
         FUN=mean)
#+end_src

** tapply
#+begin_src R :results output :exports both
  tapply(CO2$X2000, CO2[,c("Indicator.Name", "Country.Name")],
         FUN=mean)
#+end_src

** aggregate
#+begin_src R 
  aggregate(X2000 ~ Indicator.Name,
            data=CO2, FUN=mean)
  
  aggregate(cbind(X2000, X2001) ~ Indicator.Name,
            data=CO2, FUN=mean)
  
  aggregate(X2000 ~ Indicator.Name + Country.Name,
            data=CO2, FUN=mean)
  
  
#+end_src

** aggregate
#+begin_src R 
  aggregate(cbind(X2000, X2001) ~
            Indicator.Name + Country.Name,
            data=CO2, FUN=mean)
  
  aggregate(cbind(X2000, X2001) ~
            Indicator.Name + Country.Name,
            data=CO2, FUN=mean)
  
  aggregate(cbind(X2000, X2001) ~
            Indicator.Name + Country.Name,
            subset=(Country.Name %in% c('United States', 'China')),
                    data=CO2, FUN=mean)
#+end_src
** aggregate
#+begin_src R 
  aggregate(cbind(XXA_00, XXA_36, XXB_00) ~
            ensg + chromosome + symbol,
            data = chromo,  FUN = mean)
  
  aggregate(cbind(XXA_00, XXA_36, XXB_00) ~ ensg ,
            data = chromo,  FUN = mean)
#+end_src   

* Cambio de formato
** =stack=
- Primero escogemos un subconjunto
#+begin_src R 
  CO2China <- subset(CO2,
                     subset=(Country.Name=='China' &
                             Indicator.Name=='CO2 emissions (kg per PPP $ of GDP)'),
                     select=-c(Country.Name, Country.Code,
                               Indicator.Name, Indicator.Code))
#+end_src
- Pasamos de formato =wide= a =long=
#+begin_src R 
  stack(CO2China)
#+end_src

** =reshape=: =wide= a =long=
- Primer intento
#+begin_src R 
  CO2long <- reshape(CO2,
                     varying=list(names(CO2)[5:16]),
                     direction='long')
  head(CO2long)
#+end_src
- Añadimos argumentos
#+begin_src R 
  CO2long <- reshape(CO2,
                     varying=list(names(CO2)[5:16]),
                     timevar='Year', v.names='Value',
                     times=2000:2011,
                     direction='long')
  head(CO2long)
#+end_src
** =reshape=: =long= a =wide=
- Primero escogemos las columnas de interés
#+begin_src R 
  CO2subset <- CO2long[c("Country.Name",
                         "Indicator.Name",
                         "Year", "Value")]
#+end_src
- Ahora cambiamos formato
#+begin_src R 
  CO2wide <- reshape(CO2subset,
                     idvar=c('Country.Name','Year'),
                     timevar='Indicator.Name',
                     direction='wide')
  
#+end_src
- Y ponemos nombres al gusto
#+begin_src R 
  names(CO2wide)[3:6] <- c('CO2.PPP', 'CO2.capita',
                           'GNI.PPP', 'GNI.capita')
  
  head(CO2wide)
#+end_src

# #+begin_src R 
#   dat2011 <- read.csv('data/GeneralSpanishElections2011.gz')
  
#   names(dat2011)[1:13]
  
#   aggregate(cbind(Votos.en.blanco, Votos.nulos, Votos.válidos) ~ Nombre.de.Comunidad,
#             data=dat2011, FUN=sum)
  
#   census <- dat2011$Total.censo.electoral
#   validVotes <- dat2011$Votos.válidos
#   ## Election results per political party and municipality
#   votesData <- dat2011[, 12:1023]
#   ## Abstention as an additional party
#   votesData$ABS <- census - validVotes
#   ## Winner party at each municipality
#   whichMax <- apply(votesData,  1, function(x)names(votesData)[which.max(x)])
#   ## Results of the winner party at each municipality
#   Max <- apply(votesData, 1, max)
#   ## OTH for everything but PP, PSOE and ABS
#   whichMax[!(whichMax %in% c('PP',  'PSOE', 'ABS'))] <- 'OTH'
#   ## Percentage of votes with the electoral census
#   pcMax <- Max/census * 100
  
#   ## Province-Municipality code. sprintf formats a number with leading zeros.
#   PROVMUN <- with(dat2011, paste(sprintf('%02d', Código.de.Provincia),
#                                  sprintf('%03d', Código.de.Municipio),
#                                  sep=""))
  
#   votes2011 <- data.frame(dat2011[,c('Nombre.de.Comunidad', 'Nombre.de.Provincia')],
#                           PROVMUN, whichMax, Max, pcMax)
  
  
#   ##write.csv(votes2011, 'data/votes2011.csv', row.names=FALSE)
# #+end_src


