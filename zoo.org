#+TITLE:     Series temporales con zoo

#+SETUPFILE: config.org

#+OPTIONS: H:2
#+PROPERTY: eval no
#+PROPERTY: exports code


* Lectura de ficheros (sencillo)
** Descargamos datos de SIAR
- [[http://eportal.magrama.gob.es/websiar/Inicio.aspx]]
- *Estación*: Aranjuez, Madrid
- *Período*: 01/01/2004 a 31/12/2011
- *Variables*: Temperatura, Humedad, Viento, Lluvia, Radiación, ET

** Lectura de datos con =read.table=
- Primero configuramos el directorio de trabajo
#+begin_src R
  ## Entre las comillas hay que indicar el directorio en el que está el
  ## repositorio (será visible la carpeta data/)
  setwd('~/github/intro/')
#+end_src
- A continuación leemos el fichero (usamos la versión final)
#+begin_src R
  dats <- read.table('data/aranjuez.csv')
  head(dats)
  
  dats <- read.table('data/aranjuez.csv', sep=',')
  head(dats)
  
  dats <- read.table('data/aranjuez.csv', sep=',', header=TRUE)
  head(dats)
  
  aranjuez <- read.csv('data/aranjuez.csv')
  head(aranjuez)
  
  class(aranjuez)
  names(aranjuez)
#+end_src

** Visualización de datos 
#+begin_src R 
  library(lattice)
  
  xyplot(Radiation ~ TempAvg, data=aranjuez)
  
  xyplot(Radiation ~ TempAvg, data=aranjuez,
         type=c('p', 'r'))
  
  xyplot(Radiation ~ TempAvg + TempMax + TempMin,
         data = aranjuez, xlab='Temperature',
         type=c('p', 'r'), auto.key=TRUE,
         pch=16, alpha=0.5)
#+end_src
  
** Visualización de datos (advanced!)
#+begin_src R 
  library(RColorBrewer)
  
  humidClass <- cut(aranjuez$HumidAvg, 4)
  myPal <- brewer.pal(n=4, 'GnBu')
  
  xyplot(Radiation ~ TempAvg + TempMax + TempMin,
         groups=humidClass, outer=TRUE,
         data = aranjuez, xlab='Temperature',
         layout=c(3, 1),
         scales=list(relation='free'),
         auto.key=list(space='right'),
         par.settings=custom.theme(pch=16,
           alpha=0.8, col=myPal))
  
#+end_src 
** Transformamos a serie temporal

#+begin_src R
  library(zoo)
  
  fecha <- as.POSIXct(aranjuez[,1],
                      format='%Y-%m-%d')
  head(fecha)
  
  aranjuez <- zoo(aranjuez[, -1], fecha)
  class(aranjuez)
  head(aranjuez)
#+end_src

** Leemos directamente como serie temporal
#+begin_src R
  aranjuez <- read.zoo('data/aranjuez.csv',
                       sep=',', header=TRUE)
#+end_src

#+begin_src R
header(aranjuez)
names(aranjuez)
summary(index(aranjuez))
#+end_src

* Lectura de datos (real)
** Ahora con la versión original
- Primero descomprimimos el archivo
#+begin_src R
  unzip('data/InformeDatos.zip', exdir='data')
#+end_src
- Y ahora abrimos teniendo en cuenta codificación, separadores, etc.
#+begin_src R
  aranjuez <- read.table("data/M03_Aranjuez_01_01_2004_31_12_2011.csv",
                       fileEncoding = 'UTF-16LE',
                       header = TRUE, fill = TRUE,
                       sep = ';', dec = ",")
#+end_src
- Vemos el contenido
#+begin_src R
  head(aranjuez)
  summary(aranjuez)
  names(aranjuez)
#+end_src

** Convertimos a serie temporal
- Sólo nos interesan algunas variables (indexamos por columnas)
#+begin_src R
  tt <- as.Date(aranjuez$Fecha, format='%d/%m/%Y')
  aranjuez <- zoo(aranjuez[, c(6, 7, 9, 11, 12, 16,
                               17, 19, 20, 22)],
                  order.by=tt)
#+end_src

** Ajustamos los nombres (opcional)
#+begin_src R
  names(aranjuez) <- c('TempAvg', 'TempMax',
                       'TempMin', 'HumidAvg',
                       'HumidMax','WindAvg',
                       'WindMax', 'Radiation',
                       'Rain', 'ET')
#+end_src

** Nuevamente mostramos datos
- Método simple
#+begin_src R
  xyplot(aranjuez)
#+end_src
- Seleccionamos variables y superponemos
#+begin_src R
xyplot(aranjuez[,c("TempAvg", "TempMax", "TempMin")],
       superpose=TRUE)
#+end_src
- Para cruzar variables hay que convertir a =data.frame=
#+begin_src R
  xyplot(TempAvg ~ Radiation,
         data=as.data.frame(aranjuez))
#+end_src

** Limpieza de datos
- Conversión de Unidades (MJ -> Wh)
#+begin_src R
  aranjuez$G0 <- aranjuez$Radiation/3.6*1000
  xyplot(aranjuez$G0)
#+end_src
- Filtrado de datos
#+begin_src R
  aranjuezClean <- within(as.data.frame(aranjuez),{
    TempMin[TempMin>40] <- NA
    HumidMax[HumidMax>100] <- NA
    WindAvg[WindAvg>10] <- NA
    WindMax[WindMax>10] <- NA
  })
  
  aranjuez <- zoo(aranjuezClean, index(aranjuez))
#+end_src

* Datos agregados
** Media anual
- Primero definimos una función para extraer el año
#+begin_src R
  Year <- function(x)as.numeric(format(x, "%Y"))
  
  Year(index(aranjuez))
  
#+end_src
- Y la empleamos para agrupar con =aggregate=
#+begin_src R
  aranjuezY <- aggregate(aranjuez$G0, by=Year,
                         FUN=mean, na.rm=TRUE)
  aranjuezY
  class(aranjuezY)
#+end_src

#+begin_src R
  G0y <- aggregate(aranjuez$G0, by=Year,
                   FUN=mean, na.rm=TRUE)
  G0y
#+end_src

** Medias anuales usando =cut=
#+begin_src R 
  aggregate(aranjuez$G0, by=function(tt)cut(tt, 'year'),
            FUN=mean, na.rm=TRUE)
#+end_src

** Medias mensuales
- Meses como números
#+begin_src R
  Month <- function(x)as.numeric(format(x, "%m"))
  
  Month(index(aranjuez))
#+end_src

#+begin_src R
  G0m <- aggregate(aranjuez$G0, by=Month,
                   FUN=mean, na.rm=TRUE)
  G0m
#+end_src

- Meses como etiquetas
#+begin_src R
  months(index(aranjuez))
#+end_src

#+begin_src R
  G0m <- aggregate(aranjuez$G0, by=months,
                   FUN=mean, na.rm=TRUE)
  G0m
#+end_src

** Medias mensuales para cada año
- La función para agrupar es =as.yearmon=
#+begin_src R
  as.yearmon(index(aranjuez))
#+end_src

#+begin_src R
  G0ym <- aggregate(aranjuez$G0, by=as.yearmon,
                    FUN=mean, na.rm=TRUE)
  G0ym
#+end_src

* Datos desde una URL
** Ejemplo: Lanai-Hawaii

#+begin_src R
  URL <- "http://www.nrel.gov/midc/apps/plot.pl?site=LANAI&start=20090722&edy=19&emo=11&eyr=2010&zenloc=19&year=2010&month=11&day=1&endyear=2010&endmonth=11&endday=19&time=1&inst=3&inst=4&inst=5&inst=10&type=data&first=3&math=0&second=-1&value=0.0&global=-1&direct=-1&diffuse=-1&user=0&axis=1"
  ## URL <- "data/NREL-Hawaii.csv"
#+end_src

#+begin_example
DATE,HST,Global Horizontal [W/m^2],Direct Normal [W/m^2],Diffuse Horizontal [W/m^2],Air Temperature [deg C]
11/1/2010,06:32,4.87621,0,4.87621,14.67
11/1/2010,06:33,5.14142,0,5.14142,14.54
11/1/2010,06:34,1.42216,0,1.42216,14.43
11/1/2010,06:35,1.95135,0,1.95135,14.4
11/1/2010,06:36,2.44687,0,2.44687,14.55
11/1/2010,06:37,3.16990,0,3.16990,14.95
11/1/2010,06:38,3.99677,0,3.99677,15.45
11/1/2010,06:39,4.88811,0,4.88811,15.71
11/1/2010,06:40,5.85428,0,5.85428,15.8
11/1/2010,06:41,8.27598,0,8.27598,15.87
#+end_example

** Leemos como serie temporal
- Leemos con =read.zoo=
#+begin_src R
  lat <- 20.77
  lon <- -156.9339
  hawaii <- read.zoo(URL,
                  col.names = c("date", "hour",
                    "G0", "B", "D0", "Ta"),
                  ## Dia en columna 1, Hora en columna 2
                  index = list(1, 2),
                  ## Obtiene escala temporal de estas dos columnas
                  FUN = function(d, h) as.POSIXct(
                    paste(d, h),
                    format = "%m/%d/%Y %H:%M",
                    tz = "HST"), 
                  header=TRUE, sep=",")
  
#+end_src
- Añadimos Directa en el plano Horizontal
#+begin_src R
  hawaii$B0 <- with(hawaii, G0-D0)
#+end_src

** Mostramos datos como serie temporal
#+begin_src R
  xyplot(hawaii)
  xyplot(hawaii[,c('G0', 'D0', 'B0')],
         superpose=TRUE)
#+end_src

** Mostramos relaciones entre variables
#+begin_src R
  xyplot(Ta ~ G0 + D0 + B0,
         data=as.data.frame(hawaii),
         type=c('p', 'smooth'),
         par.settings=custom.theme(
           alpha=.5, pch=16,
           lwd=3, col.line='black'),
         outer=TRUE, layout=c(3, 1),
         scales=list(x=list(relation='free')))
#+end_src

** Irradiación horaria
- Primer intento
#+begin_src R
  hour <- function(x)as.numeric(format(x, '%H'))
#+end_src

#+begin_src R
  G0h <- aggregate(hawaii$G0, by=hour,
                   FUN=sum, na.rm=1)/1000
  G0h
#+end_src

** Irradiación horaria

- Mejor así
#+begin_src R
  hour <- function(x)as.POSIXct(format(x,
                                       '%Y-%m-%d %H:00:00'))
#+end_src

#+begin_src R
  G0h <- aggregate(hawaii$G0, by=hour,
                   FUN=sum, na.rm=1)/60
  G0h
#+end_src

** Irradiación diaria
- A partir de la horaria
#+begin_src R
  G0d <- aggregate(G0h,
                   by=function(x)format(x, '%Y-%m-%d'),
                   sum)/1000
#+end_src
- A partir de la minutaria
#+begin_src R
  day <- function(x)format(x, '%Y-%m-%d')
  G0d <- aggregate(hawaii$G0, by=day,
                   sum)/60/1000
  G0d
  
  truncDay <- function(x)as.POSIXct(trunc(x, units='day'))
  G0d <- aggregate(hawaii$G0, by=truncDay,
                   sum)/60/1000
  G0d
#+end_src


** Más complicado: agrupar por 30 minutos
#+begin_src R
  halfHour <- function(tt, delta=30){
    tt <- as.POSIXlt(tt)
    gg <- tt$min %/% delta
    tt <- modifyList(tt, list(min=gg*delta))
    as.POSIXct(tt)
  }
#+end_src

#+begin_src R
  hawaii30 <- aggregate(hawaii, by=halfHour,
                        FUN=sum)/60
  
  head(hawaii30)
#+end_src


# ######################################
# Una estación completa
# http://procomun.wordpress.com/2012/10/31/aemet-web-scraping-con-r/
# ######################################
# arenosillo <- read.csv2('data/El.Arenosillo.txt')
# tt <- as.POSIXct(arenosillo$Index)
# arenosillo <- zoo(arenosillo[, -1], tt) * 3.6
# names(arenosillo) <- c('D0', 'B', 'G0')
# xyplot(arenosillo, superpose=TRUE)

# truncDay <- function(x){as.POSIXct(trunc(x, units='days'))}
# radD <- aggregate(arenosillo, by=truncDay, sum, na.rm=TRUE)/1000 ## kWh
# xyplot(radD, superpose=TRUE)

# ########
# ## AEMET
# ## http://www.tiempodiario.com/rayos/20101205/radiacion_datas.csv
# #######
# #+begin_src R
  
#   URL1 <- "http://www.tiempodiario.com/rayos"
#   URL2 <- "radiacion_datas.csv"
  
#   Y <- 2010
#   m <- 12
#   d <- 5
#   ymd <- as.POSIXct(paste(Y, m, d, sep='-'))
  
#   URL <- paste(URL1, format(ymd, '%Y%m%d'), URL2, sep='/')
#   ## URL <- 'data/radiacion_datas.csv'
  
#   aemetRad <- read.table(URL,
#                    header=FALSE, fill=TRUE, skip=1,
#                    sep=';')
#   nc <- ncol(aemetRad)
#   nms <- aemetRad[1, 2:nc]
  
#   aemetRad <- aemetRad[-1,]
#   Gcols <- 4:19
#   Dcols <- 22:37
#   Bcols <- 40:55
  
  
#   ##estaciones <- aemetRad[,1] ## ¿Encoding?
#   estID <- aemetRad[,2]
#   tt <- seq(ymd + 5*3600, by='hour', length=16)
#   G0 <- zoo(t(aemetRad[,Gcols]), tt) * 3.6 ## kiloJulios -> Wh
#   D0 <- zoo(t(aemetRad[,Dcols]), tt) * 3.6
#   B <- zoo(t(aemetRad[,Bcols]), tt) * 3.6
#   names(G0) <- names(D0) <- names(B) <- estID
  
#   xyplot(G0, superpose=TRUE, auto.key=FALSE)
  
#   G0d <- colSums(G0, na.rm=TRUE)
# #+end_src
   
